# Qualifier values
SELECT distinct  ?val ?valLabel
WHERE
{
  ?stmt pq:PXXXX ?val .
  SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],mul,en". } # Helps get the label in your language, if not, then default for all languages, then en language
}
limit 25

# Qualifier usage example
SELECT distinct ?item ?val ?valLabel ?qvalLabel
WHERE
{
  ?stmt pq:PXXXX ?qval .
  ?item p:PYYY ?stmt . ?stmt ps:PYYY ?val
  SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],mul,en". } # Helps get the label in your language, if not, then default for all languages, then en language
}
limit 25

# Property usage example
SELECT distinct ?item ?itemLabel ?val ?valLabel
WHERE
{
  ?item p:PYYY ?stmt . ?stmt ps:PYYY ?val
  SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],mul,en". } # Helps get the label in your language, if not, then default for all languages, then en language
}
limit 25




##### For each selected qualifiers find if its description or usage description refers to 'statement' or 'qualifi...' 
##### and the number of usage example as a qualifier.

# Qualifier usage example
SELECT distinct ?x (count(?stmt) as ?no_examples) ?desc_contains_stmt ?desc_contains_qualif ?ui_contains_stmt ?ui_contains_qualif #?s ?p ?pval ?q ?qval ?qlabel
WHERE
{ 
values (?rx ?x) {
(1 wd:P1545)
(2 wd:P1810)
(3 wd:P585)
(4 wd:P580)
(5 wd:P1932)
(6 wd:P582)
(7 wd:P459)
(8 wd:P2241)
(9 wd:P407)
(10 wd:P518)
(11 wd:P3831)
(12 wd:P1013)
(13 wd:P577)
(14 wd:P972)
(15 wd:P1227)
(16 wd:P2701)
(17 wd:P1001)
(18 wd:P2868)
(19 wd:P7452)
(20 wd:P1480)
(21 wd:P2093)
(22 wd:P805)
(23 wd:P642)
(24 wd:P1352)
(25 wd:P1326)
(26 wd:P478)
(27 wd:P1552)
(28 wd:P6954)
(29 wd:P2699)
(30 wd:P304)
(31 wd:P2096)
(32 wd:P195)
(33 wd:P400)
(34 wd:P1534)
(35 wd:P6259)
(36 wd:P1319)
(37 wd:P1057)
(38 wd:P3744)
(39 wd:P155)
(40 wd:P1065)
(41 wd:P156)
(42 wd:P1476)
(43 wd:P276)
(44 wd:P1264)
(45 wd:P9675)
(46 wd:P1114)
(47 wd:P813)
(48 wd:P1351)
(49 wd:P659)
(50 wd:P4390)
(51 wd:P703)
(52 wd:P1366)
(53 wd:P625)
(54 wd:P54)
(55 wd:P3274)
(56 wd:P958)
(57 wd:P2937)
(58 wd:P437)
(59 wd:P1539)
(60 wd:P2561)
(61 wd:P131)
(62 wd:P17)
(63 wd:P5102)
(64 wd:P973)
(65 wd:P1540)
(66 wd:P1365)
(67 wd:P2047)
(68 wd:P2378)
(69 wd:P6552)
(70 wd:P1350)
(71 wd:P3680)
(72 wd:P3005)
(73 wd:P3740)
(74 wd:P613)
(75 wd:P512)
(76 wd:P217)
(77 wd:P4970)
(78 wd:P405)
(79 wd:P750)
(80 wd:P768)
(81 wd:P1358)
(82 wd:P9688)
(83 wd:P548)
(84 wd:P574)
(85 wd:P9687)
(86 wd:P2210)
(87 wd:P361)
(88 wd:P291)
(89 wd:P106)
(90 wd:P282)
(91 wd:P433)
(92 wd:P5436)
(93 wd:P102)
(94 wd:P2676)
(95 wd:P275)
(96 wd:P31)
(97 wd:P50)
(98 wd:P21)
(99 wd:P5051)
(100 wd:P1705)
(101 wd:P39)
(102 wd:P137)
(103 wd:P1268)
(104 wd:P2911)
(105 wd:P1111)
(106 wd:P1532)
(107 wd:P81)
(108 wd:P3575)
(109 wd:P1448)
(110 wd:P166)
(111 wd:P4241)
(112 wd:P180)
(113 wd:P828)
(114 wd:P4945)
(115 wd:P1618)
(116 wd:P366)
(117 wd:P812)
(118 wd:P1706)
(119 wd:P2397)
(120 wd:P118)
(121 wd:P175)
(122 wd:P2715)
(123 wd:P2249)
(124 wd:P2960)
(125 wd:P6424)
(126 wd:P1814)
(127 wd:P7367)
(128 wd:P108)
(129 wd:P1216)
(130 wd:P453)
(131 wd:P447)
(132 wd:P2125)
(133 wd:P4633)
(134 wd:P560)
(135 wd:P27)
(136 wd:P3629)
(137 wd:P281)
(138 wd:P11840)
(139 wd:P496)
(140 wd:P670)
(141 wd:P2912)
(142 wd:P8327)
(143 wd:P4070)
(144 wd:P1039)
(145 wd:P1011)
(146 wd:P413)
(147 wd:P2348)
(148 wd:P123)
(149 wd:P1027)
(150 wd:P528)
(151 wd:P3294)
(152 wd:P1683)
(153 wd:P10663)
(154 wd:P1686)
(155 wd:P8001)
(156 wd:P569)
(157 wd:P1433)
(158 wd:P69)
(159 wd:P4100)
(160 wd:P7887)
(161 wd:P527)
(162 wd:P790)
(163 wd:P1012)
(164 wd:P138)
(165 wd:P1416)
(166 wd:P5168)
(167 wd:P3382)
(168 wd:P793)
(169 wd:P1355)
(170 wd:P641)
(171 wd:P2781)
(172 wd:P654)
(173 wd:P2926)
(174 wd:P5021)
(175 wd:P710)
(176 wd:P1262)
(177 wd:P669)
(178 wd:P101)
(179 wd:P2094)
(180 wd:P921)
(181 wd:P462)
(182 wd:P1356)
(183 wd:P1107)
(184 wd:P8627)
(185 wd:P7018)
(186 wd:P2283)
(187 wd:P8626)
(188 wd:P8338)
(189 wd:P1357)
(190 wd:P6949)
(191 wd:P6375)
(192 wd:P708)
(193 wd:P1192)
(194 wd:P1343)
(195 wd:P1642)
(196 wd:P9043)
(197 wd:P6710)
(198 wd:P443)
(199 wd:P1721)
(200 wd:P2076)
(201 wd:P356)
(202 wd:P709)
(203 wd:P1449)
(204 wd:P136)
(205 wd:P4243)
(206 wd:P2043)
(207 wd:P19)
(208 wd:P1359)
(209 wd:P937)
(210 wd:P1535)
(211 wd:P6241)
(212 wd:P2441)
(213 wd:P5832)
(214 wd:P554)
(215 wd:P4856)
(216 wd:P2049)
(217 wd:P5592)
(218 wd:P636)
(219 wd:P2501)
(220 wd:P1435)
(221 wd:P393)
(222 wd:P463)
(223 wd:P9259)
(224 wd:P9570)
(225 wd:P98)
(226 wd:P10777)
(227 wd:P4271)
(228 wd:P2322)
(229 wd:P5054)
(230 wd:P1877)
(231 wd:P13188)
(232 wd:P18)
(233 wd:P3871)
(234 wd:P898)
(235 wd:P1680)
(236 wd:P20)
(237 wd:P4101)
(238 wd:P1538)
(239 wd:P570)
(240 wd:P2677)
(241 wd:P8554)
(242 wd:P792)
(243 wd:P194)
(244 wd:P348)
(245 wd:P965)
(246 wd:P2571)
(247 wd:P2443)
(248 wd:P8484)
(249 wd:P170)
(250 wd:P697)
(251 wd:P460)
(252 wd:P264)
(253 wd:P3938)
(254 wd:P6208)
(255 wd:P1793)
(256 wd:P854)
(257 wd:P1031)
(258 wd:P6216)
(259 wd:P4900)
(260 wd:P421)
(261 wd:P57)
(262 wd:P7937)
(263 wd:P8555)
(264 wd:P2305)
(265 wd:P748)
(266 wd:P4626)
(267 wd:P1891)
(268 wd:P12913)
(269 wd:P5281)
(270 wd:P2416)
(271 wd:P1390)
(272 wd:P444)
(273 wd:P576)
(274 wd:P10627)
(275 wd:P352)
(276 wd:P140)
(277 wd:P6887)
(278 wd:P12546)
(279 wd:P2440)
(280 wd:P2598)
(281 wd:P2077)
(282 wd:P5800)
(283 wd:P1269)
(284 wd:P186)
(285 wd:P1478)
(286 wd:P121)
(287 wd:P1942)
(288 wd:P10271)
(289 wd:P571)
(290 wd:P1310)
(291 wd:P945)
(292 wd:P2001)
(293 wd:P4826)
(294 wd:P4815)
(295 wd:P4825)
(296 wd:P8423)
(297 wd:P1444)
(298 wd:P7125)
(299 wd:P6477)
(300 wd:P2044)
(301 wd:P7668)
(302 wd:P1659)
(303 wd:P1050)
(304 wd:P2453)
(305 wd:P184)
(306 wd:P2700)
(307 wd:P176)
(308 wd:P2825)
(309 wd:P119)
(310 wd:P2306)
(311 wd:P2308)
(312 wd:P1028)
} .

  ?x schema:description ?lab ; rdfs:label ?ll
  filter(lang(?lab) = "en" && lang(?ll) = "en")
  bind (contains(lcase(?lab), "statement") as ?desc_contains_stmt)
  bind (contains(lcase(?lab), "qualif") as ?desc_contains_qualif)
     
  optional{?x  wdt:P2559 ?ui.
  filter(lang(?ui) = "en")
  bind (contains(lcase(?ui), "statement") as ?ui_contains_stmt)
  bind (contains(lcase(?ui), "qualif") as ?ui_contains_qualif)
  }
         
   optional{?x p:P1855 ?stmt. ?stmt ps:P1855 ?s .
    filter exists{?x wikibase:qualifier ?q . 
    ?stmt ?q ?qval . ?stmt ?pasq ?pqval .
    ?pprop wikibase:qualifier ?pasq ; wikibase:statementProperty ?ps.
    ?pprop wikibase:claim ?p .
    ?s ?p ?stmt2 .  ?stmt2 ?q ?qval2 . #?stmt2 ?ps ?pqval .
    }
   }
  
  #SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],mul,en". } # Helps get the label in your language, if not, then default for all languages, then en language
}
group by ?rx  ?x ?desc_contains_stmt ?desc_contains_qualif ?ui_contains_stmt ?ui_contains_qualif
order by ?rx
# limit 64


# Check if the qualifier ?q is allowed as qualifier of the properties ?prop. 

SELECT ?q ?spc
WHERE {
  VALUES (?q) {(wdt:P122)}
  VALUES (?prop) {(wd:P580) (wd:PP582) ( wd:P5102) ( wd:P1480) ( wd:P642) ( wd:P585) ( wd:P805) ( wd:P2241) ( wd:P518) ( wd:P459) ( wd:P53) ( wd:P92) ( wd:P7452) ( wd:P361) ( wd:P1706) ( wd:P828) ( wd:P1534)
  }
 
  ?prop wdt:P2302 wd:Q21510851. # there is a qual. allowed constraint
  
  OPTIONAL 
  {?prop p:P2302 ?spc . ?spc ps:P2302 wd:Q21510851 . 
    ?spc pq:P2306 ?q
  }
  #?st  pq:P123 ?pub . ?st ?prop ?vprop #   ?item p:P1082 ?s. ?s ps:P1082 ?opo. ?s pq:P123 ?pub.
  #                        filter(strstarts(str(?prop), "http://www.wikidata.org/prop/statement/"))
  #SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],mul,en". } # Helps get the label in your language, if not, then default for all languages, then en language
}

# Find the properties qualified by q

SELECT ?p (COUNT(?stmt) AS ?nbstmt)
{ VALUES (?q) {(pq:P585)}
  ?stmt ?q ?qv ; ?p ?pv .
  FILTER(STRSTARTS(STR(?p),"http://www.wikidata.org/prop/statement/"))
}
GROUP BY ?p

# for each property check if it's allowed as qualifer, i.e. not explicitly disallowed
# it is not allowed if it has property scope constraint that
# - does not contain 'property scope' 'as qualifier'
# - does not have a 'constraint scope' <something>
# 

PREFIX wikibase: <http://wikiba.se/ontology#>
PREFIX wd: <http://www.wikidata.org/entity/>
PREFIX p: <http://www.wikidata.org/prop/>
PREFIX ps: <http://www.wikidata.org/prop/statement/>
PREFIX pq: <http://www.wikidata.org/prop/qualifier/>
SELECT DISTINCT ?p 
{
?p wikibase:qualifier ?q . # only look for qualifiers
 OPTIONAL { ?p p:P2302 ?sc . ?sc ps:P2302 wd:Q53869507 .  # property scope consraint
 	     MINUS { ?sc pq:P5314 wd:Q54828449 . } # not allowing qualifiers
 	     MINUS { ?sc pq:P4680 ?scope . } # no scope for this Constraint
	     MINUS { ?sc wikibase:rank wikibase:DeprecatedRank . } # not deprecated
	     BIND ( "NO" as ?allowed ) } # not allowed as qualifier
FILTER(! BOUND(?allowed))   
}

# Properties p that have an Allowed qualifiers constraint
# together with the allowed qualifiers q

PREFIX wikibase: <http://wikiba.se/ontology#>
PREFIX wd: <http://www.wikidata.org/entity/>
PREFIX p: <http://www.wikidata.org/prop/>
PREFIX ps: <http://www.wikidata.org/prop/statement/>
PREFIX pq: <http://www.wikidata.org/prop/qualifier/>

SELECT ?p ?q
{  ?p wikibase:qualifier ?pq . # select all properties
   ?p p:P2302 ?sc . ?sc ps:P2302 wd:Q21510851 .  ?sc pq:P2306 ?q 
}
